#!/usr/bin/env node

'use strict';

var listJobs                  = require('../lib/api').listJobs;

var version                   = require('../lib/cliutil').version;
var usage                     = require('../lib/cliutil').usage;
var help                      = require('../lib/cliutil').help;
var halt                      = require('../lib/cliutil').halt;
var url                       = require('../lib/cliutil').url;
var toHttpUrl                 = require('../lib/cliutil').toHttpUrl;

var consts                    = require('../lib/consts');


var DEFAULT_OPTIONS           = { 'url'         : consts.DEFAULT_URL,
                                  'json'        : false,
                                  'monitor'     : false
                                };


var options                   = Object.create(DEFAULT_OPTIONS);


function main () {
  var args = process.argv.slice(2);
  var arg;

  while ((arg = args.shift())) {
    switch (arg) {

      case '-v':
      case '--version':
      return version();

      case '--usage':
      return usage();

      case '--help':
      return help();

      case '--url':
      case '--hostname':
      case '--port':
      case '--token':
      case '--secure':
      options.url = url(options.url, arg, args.shift());
      break;

      case '--monitor':
      options.monitor = true;
      break;

      case '--json':
      options.json = true;
      break;

      default:
      return halt('bad argument - ' + arg);
    }
  }

  options.url = toHttpUrl(options.url);

  listJobs(options.url, function (err, list) {
    if (err) {
      halt(err.message);
    }

    if (options.json) {
      return console.log(JSON.stringify(list));
    }

    if (list.length == 0) {
      console.log('No jobs are currently running');
      return;
    }

    console.log('total %s', list.length);

    list.forEach(function (job) {
      console.log('#%s %s %s', job.id, job.name, job.state);
    });
  });
}


// function monitorjobs (url, C) {
//   
// }
// 

if (process.argv[1] == __filename) {
  main();
}