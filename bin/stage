#!/usr/bin/env node

/**
Usage: stage <command>

Most common used commands for stage:

  abort         Aborts a currently running test
  clients       List available clients (slaves and monitors) on master process
  collect       Get report for specified job
  extras        Shows available extras commands
  help          Shows available commands for stage (this section)
  install       Installs a test package on master process
  jobs          List all running and finished jobs on master process
  localenv      Creates a local environment with a Master and a Slave running
  master        Spawns a master process
  run           Runs a test package on master process
  slave         Spawns a slave process
  tests         List all available test packages on master process
  uninstall     Uninstalls a test package on master process

Built-in maintenance commands:

  init-test     Initializes a test template.
  setup-machine Installs dependencies on a remote machine via SSH.
  setup-smartdc Installs dependencies on a SmartDC machine.
  clean-smartdc Removes all SmartDC machines.

See `stage <command> --help` for more information on a specific command.
*/

'use strict';

var resolve                   = require.resolve;

var spawn                     = require('child_process').spawn;

var basename                  = require('path').basename;
var extname                   = require('path').extname;
var presolve                  = require('path').resolve;
var join                      = require('path').join;

var readFileSync              = require('fs').readFileSync;
var readdirSync               = require('fs').readdirSync;
var existsSync                = require('fs').existsSync;


var BUILTIN_EXTRAS            = [ resolve('./stage-setup-machine'),
                                  resolve('./stage-setup-smartdc'),
                                  resolve('./stage-clean-smartdc'),
                                  resolve('./stage-init-test')
                                ];


function main () {
  var cmd  = process.argv[2];

  process.argv.splice(1, 1);

  switch (cmd) {

    case '--help':
    case 'help':
    return help();

    case '-v':
    case '--version':
    return version();

    case '--usage':
    return usage();

    case 'master':
    process.argv[1] = resolve('./stage-master');
    break;

    case 'slave':
    process.argv[1] = resolve('./stage-slave');
    break;

    case 'i':
    case 'install':
    process.argv[1] = resolve('./stage-install');
    break;

    case 'u':
    case 'uninstall':
    process.argv[1] = resolve('./stage-uninstall');
    break;

    case 'a':
    case 'abort':
    process.argv[1] = resolve('./stage-abort');
    break;

    case 'c':
    case 'clients':
    process.argv[1] = resolve('./stage-clients');
    break;

    case 'l':
    case 'localenv':
    process.argv[1] = resolve('./stage-localenv');
    break;

    case 'j':
    case 'jobs':
    process.argv[1] = resolve('./stage-jobs');
    break;

    case 't':
    case 'tests':
    process.argv[1] = resolve('./stage-tests');
    break;

    case 'r':
    case 'run':
    process.argv[1] = resolve('./stage-run');
    break;

    case 'co':
    case 'collect':
    process.argv[1] = resolve('./stage-collect');
    break;

    case 'e':
    case 'extras':
    return extras();

    default:

    if (!cmd) {
      return usage();
    }

    process.argv[1] = getExtraByAlias(cmd);

    if (existsSync(process.argv[1]) == false) {
      console.error('stage: bad command -- %s', basename(cmd));
      process.exit(1);
    }
    break;
  
  }

  require(process.argv[1]);
}


function usage () {
  var match = /\/\*\*\n([^*]+)\*\//gi;
  process.stdout.write(match.exec(readFileSync(__filename))[1]);
  process.exit(1);
}


function version () {
  console.log(require('../package').version);
  process.exit(1);
}


function help () {
  spawn('man', ['stage'], { customFds : [0, 1, 2] });
}


function extras () {
  var extras;

  console.log('Usage: stage <command>');
  console.log('Available extras commands:\n');

  extras = getAvailableExtras();
  extras.forEach(function (cmd) {
    var alias = /^stage\-(.+)/.exec(basename(cmd))[1];
    console.log('  ' + alias);
  });
}


function getExtraByAlias (alias) {
  var res;

  alias = 'stage-' + alias;

  res = getAvailableExtras().filter(function (t) {
    return basename(t) == alias;
  });

  return res[0];
}


function getAvailableExtras () {
  var dirs;
  var extras;

  extras = BUILTIN_EXTRAS.slice(0);

  if ('STAGE_EXTRAS_PATH' in process.env) {
    dirs = process.env['STAGE_EXTRAS_PATH'].split(':');
  } else {
    return extras;
  }

  dirs.forEach(function (dir) {
    var files;

    try {
      files = readdirSync(dir).filter(function (file) {
        return (/^stage\-/.test(file));
      });
    } catch (err) {
      return;
    }

    files = files.map(function (file) {
      return join(dir, file);
    });

    extras = extras.concat(files);
  });

  return extras;
}


if (process.mainModule == module) {
  main();
}